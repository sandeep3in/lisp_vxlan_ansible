{% for instance_id, instance in l3_instances.items() %}
{% if instance.vrf not in ('grt', 'GRT', 'default') %} 
vrf definition {{ instance.vrf }}
 rd 1:{{ instance_id }}
 !
 address-family ipv4
  import ipv4 unicast map global
  export ipv4 unicast map {{ instance.vrf }}
  route-target export 1:{{ instance_id }}
  route-target import 1:{{ instance_id }}
 exit-address-family
!

{% endif %}
{% endfor %}

{% set prefix_count = namespace(value=10) %}
{% for instance_id, instance in l3_instances.items() %}
{% for l2_instance in instance.l2 %}
ip prefix-list {{ instance.vrf }} seq {{prefix_count.value}} permit {{ l2_instance.network_prefix }} le 32
{% set prefix_count.value = prefix_count.value + 10 %}
{% endfor %}
{% endfor %}


{% for instance_id, instance in l3_instances.items() %}
route-map {{ instance.vrf}} permit 10
 match ip address prefix-list {{ instance.vrf }}
route-map {{ instance.vrf }} deny 20

{% endfor %}


{% set seq_count = namespace(value=10) %}
{% for prefix_list in grt_prefix %}
ip prefix-list global seq {{ seq_count.value }} permit {{ prefix_list }} 
{% set seq_count.value = seq_count.value + 10 %}
{% endfor %}


route-map global permit 10
 match ip address prefix-list global

{% if type == "switch" %}
{% for fusion_vrf in vrfs %}
{% for fusion_vrf_handoff in fusion_vrf.handoffs %}

Vlan {{  fusion_vrf_handoff.handoff_vlan }}

interface Vlan{{  fusion_vrf_handoff.handoff_vlan }}
 description handoff to Border
{%- if fusion_vrf.vrf not in ('grt', 'GRT', 'default') %} 
 vrf forwarding {{ fusion_vrf.vrf }}
{%- endif %}
{%- set local_ipaddress = fusion_vrf_handoff.handoff_prefix | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') %} 
 ip address {{ local_ipaddress }} {{ fusion_vrf_handoff.handoff_prefix | ansible.utils.ipaddr('netmask') }}
 no ip redirects
 ip route-cache same-interface

{% endfor %}
{% endfor %}
{% endif %}

{% if type == "router" %}
{% for fusion_vrf in vrfs %}
{% for fusion_vrf_handoff in fusion_vrf.handoffs %}
interface {{ fusion_vrf_handoff.handoff_interface }}.{{ fusion_vrf_handoff.handoff_vlan }}
 description handoff to Border
 encapsulation dot1q {{ fusion_vrf_handoff.handoff_vlan }}
{%- if fusion_vrf.vrf not in ('grt', 'GRT', 'default') %} 
 vrf forwarding {{ fusion_vrf.vrf }}
{%- endif %}
{%- set local_ipaddress = fusion_vrf_handoff.handoff_prefix | ansible.utils.ipaddr('1') | ansible.utils.ipaddr('address') %} 
 ip address {{ local_ipaddress }} {{ fusion_vrf_handoff.handoff_prefix | ansible.utils.ipaddr('netmask') }}
 no ip redirects
 ip route-cache same-interface

{% endfor %}
{% endfor %}
{% endif %}

router bgp {{ fusion_bgp_as }}
 bgp router-id interface Loopback0
 bgp log-neighbor-changes
 bgp graceful-restart
 !

{% for vrf in vrfs %}
{%- if vrf.vrf not in ('grt', 'GRT', 'default') %} 
 address-family ipv4 vrf {{ vrf.vrf }}
{%- else %}
 address-family ipv4
{%- endif %}
{%- for handoff in vrf.handoffs -%}
{%- set neighbor_ipaddress = handoff.handoff_prefix | ansible.utils.ipaddr('2') | ansible.utils.ipaddr('address') %} 
  neighbor {{ neighbor_ipaddress }} remote-as {{ border_bgp_as }}
{% if type == "switch" %}
  neighbor {{ neighbor_ipaddress }} update-source Vlan{{ handoff.handoff_vlan }}
{% elif type == "router" %}
  neighbor {{ neighbor_ipaddress }} update-source {{ lookup('check_interface', vlan=handoff.handoff_vlan)}}.{{ handoff.handoff_vlan }}
{% endif %}
  neighbor {{ neighbor_ipaddress }} activate
  neighbor {{ neighbor_ipaddress }} default-originate
{% endfor %}
 exit-address-family

{% endfor %}

{% if type == "switch" %}
{% for fusion_vrf in vrfs %}
{% for fusion_vrf_handoff in fusion_vrf.handoffs %}
interface {{ fusion_vrf_handoff.handoff_interface }}
 switchport mode trunk

{% endfor %}
{% endfor %}
{% endif %}

{% for instance_id, instance in l3_instances.items() %}
{% for l2_instance in instance.l2 %}
ip dhcp excluded-address vrf {{ instance.vrf  }} {{ l2_instance.network_prefix | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(dhcp_excluded_lower) | regex_replace('\/\d+',' ')  }} {{ l2_instance.network_prefix | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(dhcp_excluded_upper) | regex_replace('\/\d+',' ')  }}
{% endfor %}
{% endfor %}

{% if configure_fusion_dhcp %}
{% for instance_id, instance in l3_instances.items() %}
{% for l2_instance in instance.l2 %}
ip dhcp pool {{ l2_instance.vlan  }}
{%- if instance.vrf not in ('grt', 'GRT', 'default') %} 
 vrf {{ instance.vrf  }}
{%- endif %} 
 network {{ l2_instance.network_prefix | ansible.utils.ipaddr('net') | ansible.utils.ipaddr('0') | regex_replace('\/\d+',' ')  }} {{ l2_instance.network_prefix | ansible.utils.ipaddr('netmask')  }}
 default-router {{ l2_instance.gateway  }}

{% endfor %}
{% endfor %}
{% endif %}


ip dhcp use vrf remote
