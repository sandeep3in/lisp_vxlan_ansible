{% for instance_id, instance in l3_instances.items() %}
vrf definition {{ instance.vrf }}
 rd 1:{{ instance_id }}
 !
 address-family ipv4
  import ipv4 unicast map global
  export ipv4 unicast map {{ instance.vrf }}
  route-target export 1:{{ instance_id }}
  route-target import 1:{{ instance_id }}
 exit-address-family
!

{% endfor %}

{% for instance_id, instance in l3_instances.items() %}
{% for l2_instance in instance.l2 %}
ip prefix-list {{ instance.vrf }} seq 10 permit {{ l2_instance.network_prefix }} le 32
{% endfor %}
{% endfor %}


{% for instance_id, instance in l3_instances.items() %}
route-map {{ instance.vrf}} permit 10
 match ip address prefix-list {{ instance.vrf }}
route-map {{ instance.vrf }} deny 20

{% endfor %}

ip prefix-list global seq 10 permit 0.0.0.0/1 ge 2 le 32

route-map global permit 10
 match ip address prefix-list global

{% for fusion_vrf in vrfs %}
{% for fusion_vrf_handoff in fusion_vrf.handoffs %}
interface Vlan{{  fusion_vrf_handoff.handoff_vlan }}
 description handoff to border
 vrf forwarding {{ fusion_vrf.vrf }}
 ip address {{ fusion_vrf_handoff.handoff_ip_address | ansible.utils.ipaddr('address') }} {{ fusion_vrf_handoff.handoff_ip_address | ansible.utils.ipaddr('netmask') }}
 no ip redirects
 ip route-cache same-interface
{% endfor %}

{% endfor %}

router bgp {{ fusion_bgp_as }}
 bgp router-id interface Loopback0
 bgp log-neighbor-changes
 bgp graceful-restart
 !

{% for border_vrfs in borders_vrfs %}
{% for border_vrf in border_vrfs %}
 address-family ipv4 vrf {{ border_vrf.vrf }}
{% for border_vrf_handoff in border_vrf.handoffs %}
{% set handoff_ip_remote = border_vrf_handoff.handoff_ip_address | ansible.utils.ipaddr('address')  %}
  neighbor {{ handoff_ip_remote }} remote-as {{ border_bgp_as }}
  neighbor {{ handoff_ip_remote }} update-source Vlan{{ border_vrf_handoff.handoff_vlan }}
  neighbor {{ handoff_ip_remote }} activate
  neighbor {{ handoff_ip_remote }} default-originate
{% endfor %}
 exit-address-family

{% endfor %}

{% endfor %}

{% for fusion_vrf in vrfs %}
{% for fusion_vrf_handoff in fusion_vrf.handoffs %}
interface {{ fusion_vrf_handoff.handoff_interface }}
 switchport mode trunk

{% endfor %}
{% endfor %}

{% for instance_id, instance in l3_instances.items() %}
{% for l2_instance in instance.l2 %}
ip dhcp excluded-address vrf {{ instance.vrf }} {{ l2_instance.network_prefix | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(dhcp_excluded_lower) }}  {{ l2_instance.network_prefix | ansible.utils.ipaddr('net') | ansible.utils.ipaddr(dhcp_excluded_upper) }}
{% endfor %}
{% endfor %}


{% for instance_id, instance in l3_instances.items() %}
{% for l2_instance in instance.l2 %}
ip dhcp pool {{ instance.vrf }}
 vrf {{ instance.vrf }}
 network {{ l2_instance.network_prefix | ansible.utils.ipaddr('address') }} {{ l2_instance.network_prefix | ansible.utils.ipaddr('netmask') }}
 default-router {{ l2_instance.gateway }}

{% endfor %}
{% endfor %}

ip dhcp use vrf remote
